Zadatak 1 - Login screen

Zadatak je napraviti jednostavni ekran za login u aplikaciju (za smjernice vidjeti prilozeni wireframe dizajn). Glavni ekran treba sadrzavati listu korisnika s osnovnim podacima (ime, pozicija na poslu, avatar). Klikom na jednu od osoba treba se prikazati input field za unos lozinke. Nakon sto je lozinka unesena treba napraviti provjeru lozinke i ispisati da li je lozinka validna ili ne.

Cilj ovog zadatka je osmisliti modularnu arhitekturu koja prati jedan od osnovnih principa objektno orijentirane paradigme, enkapsulaciju, i koliko je moguce Model-view-controller oblikovni obrazac.

Uz zadatak dolazi datoteka Zadatak_1.json koja sadrzi listu korisnika sa svim potrebnim podacima. Prvi korak rjesavanja zadatka je kreiranje klase User koja ce se koristiti prilikom deserijalizacije prilozenog jsona. Rezultat ovog koraka je "model" iz MVC obrazca koji ce posluziti da se prikaze lista korisnika na ekranu

Drugi korak je prikaz liste korisnika na ekranu. Treba napraviti view koji ce prikazivati korisnika unutar liste. Na svaki element u listi je moguce kliknuti kako bi se prikazalo polje za unos passworda. Avatari za korisnike prilozeni su kao linkovi na resurse na internetu.

Zadnji korak je validacija unesenog passworda. Najjednostavniji nacin zastite passworda je spremanje njezinog hasha (koristeci MD5 algoritam) pa korisnici navedeni u jsonu imaju spremnjen passHash umjesto plain teksta. Prilikom validacije treba uneseni password pretvoriti u MD5 hash i onda usporediti s passHash parametrom u jsonu. Nakon usporedbe treba ispisati rezultat. Uz zadatak je prilozena datoteka Zadatak_1_passhash.txt koja sadrzi lozinke i njihove hasheve. Svrha datoteke je da olaksa testiranje validacije, a ne da se koristi kao lookup tablica.

Programski jezik i platforma za rjesavanje zadatka su proizvoljni. Takodjer prilozene "dizajn" datoteke su samo smjernica za rjesavanje na mobilnoj platformi i sluze da se prenese ideja.

Prilikom rjesavanja zadatka treba obratiti pozornost na modularnost rjesenja. Primjerice, ostatak aplikacije ne mora znati na koji nacin klasa za citanje jsona iz datoteke radi interno pa je preporuceno da "controller" iz MVC obrasca pristupa json klasi preko jednostavnog sucelja/interface-a. Primjer za ostale klase koje bi se mogle pojaviti u aplikaciji: Model (lista User objekata), PasswordValidator...
